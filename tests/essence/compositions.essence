language Essence 1.3

letting universe be new type enum { e1, e2, e3 }
letting f_universe be function(e1 --> 4, e2 --> 2, e3 --> 1)
letting df be {e2,e3}
letting n be 5


letting myparts be new type enum { p1, p2 }

find put: matrix indexed by [universe, myparts] of int(0..n)
	such that
		forAll p: myparts.
			sum([put[e,p] | e:universe]) > 0	$ parts are non-empty
		/\
		forAll e: universe. 
			sum([put[e,p] | p: myparts]) = f_universe(e)	$ distribute all copies
		/\
		sum([put[e,p2] | e:universe]) > 2	$ size constraint
		/\
		|[p | p:myparts, sum([put[e,p] | e <- df]) = 2]| = 1